using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Lykke.Bitcoin.Api.Client.AutoGenerated;
using Lykke.Bitcoin.Api.Client.AutoGenerated.Models;
using Lykke.Bitcoin.Api.Client.BitcoinApi.Models;
using TransactionResponse = Lykke.Bitcoin.Api.Client.BitcoinApi.Models.TransactionResponse;

// ReSharper disable once CheckNamespace
namespace Lykke.Bitcoin.Api.Client.BitcoinApi
{
    public partial class BitcoinApiClient
    {
        public async Task<OnchainResponse> TransactionTransfer(Guid? transactionId, string sourceAddress, string destinationAddress, decimal amount, string asset, decimal? fee = null)
        {
            var response = await _apiClient.ApiTransactionTransferPostAsync(new TransferRequest
            {
                TransactionId = transactionId,
                Amount = amount,
                Asset = asset,
                DestinationAddress = destinationAddress,
                SourceAddress = sourceAddress,
                Fee = fee
            });

            return PrepareResult(response, o =>
            {
                if (response is AutoGenerated.Models.TransactionResponse model)
                    return new OnchainResponse
                    {
                        Transaction = new TransactionResponse
                        {
                            Transaction = model.Transaction,
                            TransactionId = model.TransactionId,
                            Fee = model.Fee.GetValueOrDefault()
                        }
                    };
                return null;
            });
        }

        public async Task<Response> TransactionBroadcast(Guid transactionId, string transaction)
        {
            var response = await _apiClient.ApiTransactionBroadcastPostAsync(new BroadcastTransactionRequest
            {
                TransactionId = transactionId,
                Transaction = transaction
            });

            return PrepareResult(response, o => new Response());
        }

        public async Task<OnchainResponse> TransactionMultipleTransfer(Guid? transactionId, string destination, string asset, int feeRate, decimal fixedFee, IEnumerable<ToOneAddress> sources)
        {
            var response = await _apiClient.ApiTransactionMultipletransferPostAsync(new MultipleTransferRequest
            {
                TransactionId = transactionId,
                Asset = asset,
                Destination = destination,
                FeeRate = feeRate,
                FixedFee = fixedFee,
                Sources = sources.ToList()
            });

            return PrepareResult(response, o =>
            {
                if (response is TransactionIdAndHashResponse model)
                    return new OnchainResponse
                    {
                        Transaction = new TransactionResponse
                        {
                            Hash = model.Hash,
                            TransactionId = model.TransactionId
                        }
                    };
                return null;
            });
        }

        public async Task<OnchainResponse> TransactionGetById(Guid transactionId)
        {
            var response = await _apiClient.ApiTransactionByTransactionIdGetAsync(transactionId);

            return PrepareResult(response, o =>
            {
                if (response is TransactionHashResponse model)
                    return new OnchainResponse
                    {
                        Transaction = new TransactionResponse
                        {
                            Hash = model.TransactionHash
                        }
                    };
                return null;
            });
        }

      
    }
}

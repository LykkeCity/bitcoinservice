using System.Linq;
using System.Threading.Tasks;
using Lykke.Bitcoin.Api.Client.AutoGenerated;
using Lykke.Bitcoin.Api.Client.AutoGenerated.Models;
using Lykke.Bitcoin.Api.Client.BitcoinApi.Models;

// ReSharper disable once CheckNamespace
namespace Lykke.Bitcoin.Api.Client.BitcoinApi
{
    public partial class BitcoinApiClient
    {
        public async Task<AllWalletsResponse> GetAllWallets()
        {
            var response = await _apiClient.ApiWalletAllGetAsync();
            return PrepareResult(response, o =>
            {
                if (o is GetAllWalletsResult model)
                    return new AllWalletsResponse
                    {
                        Multisigs = model.Multisigs.ToList()
                    };
                return null;
            });
        }

        public async Task<Wallet> GetWallet(string clientPubKey)
        {
            var response = await _apiClient.ApiWalletByClientPubKeyGetAsync(clientPubKey);
            return PrepareResult(response, o =>
            {
                if (o is GetWalletResult model)
                    return new Wallet
                    {
                        Multisig = model.MultiSigAddress,
                        ColoredMultisig = model.ColoredMultiSigAddress
                    };
                return null;
            });
        }

        public async Task<SegwitWallet> GetSegwitWallet(string clientPubKey)
        {
            var response = await _apiClient.ApiWalletSegwitByClientPubKeyGetAsync(clientPubKey);
            return PrepareResult(response, o =>
            {
                if (o is SegwitWalletResult model)
                    return new SegwitWallet
                    {
                        Address = model.SegwitAddress
                    };
                return null;
            });
        }

        public async Task<SegwitWallet> GetSegwitWallet()
        {
            var response = await _apiClient.ApiWalletSegwitGetAsync();
            return PrepareResult(response, o =>
            {
                if (o is SegwitWalletResult model)
                    return new SegwitWallet
                    {
                        Address = model.SegwitAddress
                    };
                return null;
            });
        }

        public async Task<LykkePayWallet> GenerateLykkePayWallet()
        {
            var response = await _apiClient.ApiWalletLykkepayGeneratePostAsync();
            return PrepareResult(response, o =>
            {
                if (o is GenerateWalletResponse model)
                {
                    return new LykkePayWallet
                    {
                        Address = model.Address,
                        PubKey = model.PubKey,
                        Tag = model.Tag
                    };
                }
                return null;
            });
        }
    }
}

// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Bitcoin.Api.Client.AutoGenerated
{
    using Bitcoin.Api;
    using Bitcoin.Api.Client;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BitcoinApi.
    /// </summary>
    public static partial class BitcoinApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='multisig'>
            /// </param>
            /// <param name='clientDestination'>
            /// </param>
            /// <param name='hubDestination'>
            /// </param>
            public static object ApiBccSplitGet(this IBitcoinApi operations, string multisig = default(string), string clientDestination = default(string), string hubDestination = default(string))
            {
                return operations.ApiBccSplitGetAsync(multisig, clientDestination, hubDestination).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='multisig'>
            /// </param>
            /// <param name='clientDestination'>
            /// </param>
            /// <param name='hubDestination'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiBccSplitGetAsync(this IBitcoinApi operations, string multisig = default(string), string clientDestination = default(string), string hubDestination = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBccSplitGetWithHttpMessagesAsync(multisig, clientDestination, hubDestination, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiBccBroadcastPost(this IBitcoinApi operations, BccBroadcastModel model = default(BccBroadcastModel))
            {
                return operations.ApiBccBroadcastPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiBccBroadcastPostAsync(this IBitcoinApi operations, BccBroadcastModel model = default(BccBroadcastModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBccBroadcastPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sourceAddress'>
            /// </param>
            /// <param name='destinationAddress'>
            /// </param>
            /// <param name='fee'>
            /// </param>
            public static object ApiBccPrivatetransferGet(this IBitcoinApi operations, string sourceAddress = default(string), string destinationAddress = default(string), decimal? fee = default(decimal?))
            {
                return operations.ApiBccPrivatetransferGetAsync(sourceAddress, destinationAddress, fee).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sourceAddress'>
            /// </param>
            /// <param name='destinationAddress'>
            /// </param>
            /// <param name='fee'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiBccPrivatetransferGetAsync(this IBitcoinApi operations, string sourceAddress = default(string), string destinationAddress = default(string), decimal? fee = default(decimal?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBccPrivatetransferGetWithHttpMessagesAsync(sourceAddress, destinationAddress, fee, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add transfer transaction to queue for building
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiEnqueueTransactionTransferPost(this IBitcoinApi operations, TransferRequest model = default(TransferRequest))
            {
                return operations.ApiEnqueueTransactionTransferPostAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add transfer transaction to queue for building
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiEnqueueTransactionTransferPostAsync(this IBitcoinApi operations, TransferRequest model = default(TransferRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEnqueueTransactionTransferPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add transfer all transaction to queue for building
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiEnqueueTransactionTransferallPost(this IBitcoinApi operations, TransferAllRequest model = default(TransferAllRequest))
            {
                return operations.ApiEnqueueTransactionTransferallPostAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add transfer all transaction to queue for building
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiEnqueueTransactionTransferallPostAsync(this IBitcoinApi operations, TransferAllRequest model = default(TransferAllRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEnqueueTransactionTransferallPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add swap transaction to queue for building
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiEnqueueTransactionSwapPost(this IBitcoinApi operations, SwapRequest model = default(SwapRequest))
            {
                return operations.ApiEnqueueTransactionSwapPostAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add swap transaction to queue for building
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiEnqueueTransactionSwapPostAsync(this IBitcoinApi operations, SwapRequest model = default(SwapRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEnqueueTransactionSwapPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add issue transaction to queue for building
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiEnqueueTransactionIssuePost(this IBitcoinApi operations, IssueRequest model = default(IssueRequest))
            {
                return operations.ApiEnqueueTransactionIssuePostAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add issue transaction to queue for building
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiEnqueueTransactionIssuePostAsync(this IBitcoinApi operations, IssueRequest model = default(IssueRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEnqueueTransactionIssuePostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add destroy transaction to queue for building
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiEnqueueTransactionDestroyPost(this IBitcoinApi operations, DestroyRequest model = default(DestroyRequest))
            {
                return operations.ApiEnqueueTransactionDestroyPostAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add destroy transaction to queue for building
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiEnqueueTransactionDestroyPostAsync(this IBitcoinApi operations, DestroyRequest model = default(DestroyRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEnqueueTransactionDestroyPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ApiException ApiEnqueueTransactionRetryPost(this IBitcoinApi operations, RetryFailedRequest model = default(RetryFailedRequest))
            {
                return operations.ApiEnqueueTransactionRetryPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiException> ApiEnqueueTransactionRetryPostAsync(this IBitcoinApi operations, RetryFailedRequest model = default(RetryFailedRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEnqueueTransactionRetryPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiIsAliveGet(this IBitcoinApi operations)
            {
                operations.ApiIsAliveGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiIsAliveGetAsync(this IBitcoinApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiIsAliveGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiIsAliveRpcGet(this IBitcoinApi operations)
            {
                operations.ApiIsAliveRpcGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiIsAliveRpcGetAsync(this IBitcoinApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiIsAliveRpcGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiIsAliveNinjaGet(this IBitcoinApi operations)
            {
                operations.ApiIsAliveNinjaGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiIsAliveNinjaGetAsync(this IBitcoinApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiIsAliveNinjaGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiOffchainTransferPost(this IBitcoinApi operations, TransferModel model = default(TransferModel))
            {
                return operations.ApiOffchainTransferPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainTransferPostAsync(this IBitcoinApi operations, TransferModel model = default(TransferModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainTransferPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiOffchainCreatechannelPost(this IBitcoinApi operations, CreateChannelModel model = default(CreateChannelModel))
            {
                return operations.ApiOffchainCreatechannelPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainCreatechannelPostAsync(this IBitcoinApi operations, CreateChannelModel model = default(CreateChannelModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainCreatechannelPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiOffchainCreatehubcommitmentPost(this IBitcoinApi operations, CreateHubCommitmentModel model = default(CreateHubCommitmentModel))
            {
                return operations.ApiOffchainCreatehubcommitmentPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainCreatehubcommitmentPostAsync(this IBitcoinApi operations, CreateHubCommitmentModel model = default(CreateHubCommitmentModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainCreatehubcommitmentPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiOffchainFinalizePost(this IBitcoinApi operations, FinalizeChannelModel model = default(FinalizeChannelModel))
            {
                return operations.ApiOffchainFinalizePostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainFinalizePostAsync(this IBitcoinApi operations, FinalizeChannelModel model = default(FinalizeChannelModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainFinalizePostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiOffchainBroadcastcommitmentPost(this IBitcoinApi operations, BroadcastCommitmentModel model = default(BroadcastCommitmentModel))
            {
                return operations.ApiOffchainBroadcastcommitmentPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainBroadcastcommitmentPostAsync(this IBitcoinApi operations, BroadcastCommitmentModel model = default(BroadcastCommitmentModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainBroadcastcommitmentPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiOffchainCommitmentBroadcastPost(this IBitcoinApi operations, BroadcastLastCommitmentModel model = default(BroadcastLastCommitmentModel))
            {
                return operations.ApiOffchainCommitmentBroadcastPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainCommitmentBroadcastPostAsync(this IBitcoinApi operations, BroadcastLastCommitmentModel model = default(BroadcastLastCommitmentModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainCommitmentBroadcastPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiOffchainCashoutPost(this IBitcoinApi operations, CashoutModel model = default(CashoutModel))
            {
                return operations.ApiOffchainCashoutPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainCashoutPostAsync(this IBitcoinApi operations, CashoutModel model = default(CashoutModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainCashoutPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiOffchainCashouthubPost(this IBitcoinApi operations, CreateCashoutFromHubModel model = default(CreateCashoutFromHubModel))
            {
                return operations.ApiOffchainCashouthubPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainCashouthubPostAsync(this IBitcoinApi operations, CreateCashoutFromHubModel model = default(CreateCashoutFromHubModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainCashouthubPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiOffchainBroadcastclosingPost(this IBitcoinApi operations, BroadcastClosingChannelModel model = default(BroadcastClosingChannelModel))
            {
                return operations.ApiOffchainBroadcastclosingPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainBroadcastclosingPostAsync(this IBitcoinApi operations, BroadcastClosingChannelModel model = default(BroadcastClosingChannelModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainBroadcastclosingPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='multisig'>
            /// </param>
            /// <param name='asset'>
            /// </param>
            public static object ApiOffchainClientbalanceGet(this IBitcoinApi operations, string multisig = default(string), string asset = default(string))
            {
                return operations.ApiOffchainClientbalanceGetAsync(multisig, asset).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='multisig'>
            /// </param>
            /// <param name='asset'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainClientbalanceGetAsync(this IBitcoinApi operations, string multisig = default(string), string asset = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainClientbalanceGetWithHttpMessagesAsync(multisig, asset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='multisig'>
            /// </param>
            public static object ApiOffchainBalancesGet(this IBitcoinApi operations, string multisig = default(string))
            {
                return operations.ApiOffchainBalancesGetAsync(multisig).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='multisig'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainBalancesGetAsync(this IBitcoinApi operations, string multisig = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainBalancesGetWithHttpMessagesAsync(multisig, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='multisig'>
            /// </param>
            /// <param name='asset'>
            /// </param>
            public static object ApiOffchainChannelsGet(this IBitcoinApi operations, string multisig = default(string), string asset = default(string))
            {
                return operations.ApiOffchainChannelsGetAsync(multisig, asset).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='multisig'>
            /// </param>
            /// <param name='asset'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainChannelsGetAsync(this IBitcoinApi operations, string multisig = default(string), string asset = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainChannelsGetWithHttpMessagesAsync(multisig, asset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// </param>
            public static object ApiOffchainChannelCommitmentsGet(this IBitcoinApi operations, System.Guid? channelId = default(System.Guid?))
            {
                return operations.ApiOffchainChannelCommitmentsGetAsync(channelId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainChannelCommitmentsGetAsync(this IBitcoinApi operations, System.Guid? channelId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainChannelCommitmentsGetWithHttpMessagesAsync(channelId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='commitmentId'>
            /// </param>
            public static object ApiOffchainCommitmentGet(this IBitcoinApi operations, System.Guid? commitmentId = default(System.Guid?))
            {
                return operations.ApiOffchainCommitmentGetAsync(commitmentId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='commitmentId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainCommitmentGetAsync(this IBitcoinApi operations, System.Guid? commitmentId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainCommitmentGetWithHttpMessagesAsync(commitmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ApiException ApiOffchainRemovechannelPost(this IBitcoinApi operations, RemoveChannelModel model = default(RemoveChannelModel))
            {
                return operations.ApiOffchainRemovechannelPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiException> ApiOffchainRemovechannelPostAsync(this IBitcoinApi operations, RemoveChannelModel model = default(RemoveChannelModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainRemovechannelPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asset'>
            /// </param>
            public static object ApiOffchainAssetBalancesGet(this IBitcoinApi operations, string asset = default(string))
            {
                return operations.ApiOffchainAssetBalancesGetAsync(asset).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asset'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainAssetBalancesGetAsync(this IBitcoinApi operations, string asset = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainAssetBalancesGetWithHttpMessagesAsync(asset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// </param>
            public static object ApiOffchainCommitmentBroadcastsGet(this IBitcoinApi operations, int? limit = default(int?))
            {
                return operations.ApiOffchainCommitmentBroadcastsGetAsync(limit).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOffchainCommitmentBroadcastsGetAsync(this IBitcoinApi operations, int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOffchainCommitmentBroadcastsGetWithHttpMessagesAsync(limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates cash out transaction without signs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiTransactionTransferPost(this IBitcoinApi operations, TransferRequest model = default(TransferRequest))
            {
                return operations.ApiTransactionTransferPostAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates cash out transaction without signs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTransactionTransferPostAsync(this IBitcoinApi operations, TransferRequest model = default(TransferRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTransactionTransferPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Broadcast fully signed bitcoin transaction to network
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ApiException ApiTransactionBroadcastPost(this IBitcoinApi operations, BroadcastTransactionRequest model = default(BroadcastTransactionRequest))
            {
                return operations.ApiTransactionBroadcastPostAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Broadcast fully signed bitcoin transaction to network
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiException> ApiTransactionBroadcastPostAsync(this IBitcoinApi operations, BroadcastTransactionRequest model = default(BroadcastTransactionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTransactionBroadcastPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Broadcast multiple transfer transaction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object ApiTransactionMultipletransferPost(this IBitcoinApi operations, MultipleTransferRequest model = default(MultipleTransferRequest))
            {
                return operations.ApiTransactionMultipletransferPostAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Broadcast multiple transfer transaction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTransactionMultipletransferPostAsync(this IBitcoinApi operations, MultipleTransferRequest model = default(MultipleTransferRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTransactionMultipletransferPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return transaction hash by internal id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionId'>
            /// </param>
            public static object ApiTransactionByTransactionIdGet(this IBitcoinApi operations, System.Guid transactionId)
            {
                return operations.ApiTransactionByTransactionIdGetAsync(transactionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return transaction hash by internal id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTransactionByTransactionIdGetAsync(this IBitcoinApi operations, System.Guid transactionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTransactionByTransactionIdGetWithHttpMessagesAsync(transactionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns 2-of-2 multisig with exchange key and provided public key
            /// </summary>
            /// <remarks>
            /// curl -X GET
            /// http://localhost:8989/api/wallet/&amp;lt;client_public_key&amp;gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientPubKey'>
            /// Client public key
            /// </param>
            public static GetWalletResult ApiWalletByClientPubKeyGet(this IBitcoinApi operations, string clientPubKey)
            {
                return operations.ApiWalletByClientPubKeyGetAsync(clientPubKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns 2-of-2 multisig with exchange key and provided public key
            /// </summary>
            /// <remarks>
            /// curl -X GET
            /// http://localhost:8989/api/wallet/&amp;lt;client_public_key&amp;gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientPubKey'>
            /// Client public key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetWalletResult> ApiWalletByClientPubKeyGetAsync(this IBitcoinApi operations, string clientPubKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiWalletByClientPubKeyGetWithHttpMessagesAsync(clientPubKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all registered multisigs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ApiWalletAllGet(this IBitcoinApi operations)
            {
                return operations.ApiWalletAllGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all registered multisigs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiWalletAllGetAsync(this IBitcoinApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiWalletAllGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

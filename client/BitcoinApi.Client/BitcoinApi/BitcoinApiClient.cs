using System;
using System.Linq;
using System.Threading.Tasks;
using Bitcoin.Api.Client.AutoGenerated;
using Bitcoin.Api.Client.AutoGenerated.Models;
using Bitcoin.Api.Client.BitcoinApi.Models;
using Core.BitCoin.BitcoinApi;
using Core.BitCoin.BitcoinApi.Models;

namespace Bitcoin.Api.Client
{
    public class BitcoinApiClient : IBitcoinApiClient
    {
        private readonly AutoGenerated.BitcoinApi _apiClient;

        public BitcoinApiClient(string apiUrl)
        {
            _apiClient = new AutoGenerated.BitcoinApi(new Uri(apiUrl));
            _apiClient.SetRetryPolicy(null);
        }

        public async Task<OnchainResponse> IssueAsync(IssueData data)
        {
            var request = new IssueRequest(data.TransactionId, data.Address, data.AssetId, (decimal)data.Amount);

            var response = await _apiClient.ApiEnqueueTransactionIssuePostAsync(request);

            return PrepareOnchainResult(response);
        }

        public async Task<OnchainResponse> TransferAsync(TransferData data)
        {
            var request = new TransferRequest(data.TransactionId, data.SourceAddress, data.DestinationAddress,
                (decimal)data.Amount, data.AssetId);

            var response = await _apiClient.ApiEnqueueTransactionTransferPostAsync(request);

            return PrepareOnchainResult(response);
        }

        public async Task<OnchainResponse> TransferAllAsync(TransferAllData data)
        {
            var request = new TransferAllRequest(data.TransactionId, data.SourceAddress, data.DestinationAddress);

            var response = await _apiClient.ApiEnqueueTransactionTransferallPostAsync(request);

            return PrepareOnchainResult(response);
        }

        public async Task<OnchainResponse> DestroyAsync(DestroyData data)
        {
            var request = new DestroyRequest(data.TransactionId, data.Address, data.AssetId, (decimal)data.Amount);

            var response = await _apiClient.ApiEnqueueTransactionDestroyPostAsync(request);

            return PrepareOnchainResult(response);
        }

        public async Task<OnchainResponse> SwapAsyncTransaction(SwapData data)
        {
            var request = new SwapRequest(data.TransactionId, data.Multisig1, (decimal)data.Amount1, data.AssetId1,
                data.Multisig2, (decimal)data.Amount2, data.AssetId2);

            var response = await _apiClient.ApiEnqueueTransactionSwapPostAsync(request);

            return PrepareOnchainResult(response);
        }

        public async Task<OnchainResponse> RetryAsync(RetryData data)
        {
            var request = new RetryFailedRequest(data.TransactionId);

            var response = await _apiClient.ApiEnqueueTransactionRetryPostAsync(request);

            if (response != null)
                return new OnchainResponse
                {
                    Error = new ErrorResponse { Code = response.Error.Code, Message = response.Error.Message }
                };

            return new OnchainResponse();
        }

        public async Task<OffchainResponse> OffchainTransferAsync(OffchainTransferData data)
        {
            var request = new TransferModel(data.ClientPubKey, data.Amount, data.AssetId, data.ClientPrevPrivateKey, data.Required, !string.IsNullOrWhiteSpace(data.ExternalTransferId) ? Guid.Parse(data.ExternalTransferId) : (Guid?)null);

            var response = await _apiClient.ApiOffchainTransferPostAsync(request);

            return PrepareOffchainResult(response);
        }

        public async Task<OffchainClosingResponse> CreateChannelAsync(CreateChannelData data)
        {
            var request = new CreateChannelModel(data.ClientPubKey, data.HubAmount, data.AssetId, data.Required, !string.IsNullOrWhiteSpace(data.ExternalTransferId) ? Guid.Parse(data.ExternalTransferId) : (Guid?)null, data.ClientAmount);

            var response = await _apiClient.ApiOffchainCreatechannelPostAsync(request);

            return PrepareOffchainClosingResult(response);
        }

        public async Task<OffchainResponse> CreateHubCommitment(CreateHubComitmentData data)
        {
            var request = new CreateHubCommitmentModel(data.ClientPubKey, data.AssetId, data.Amount, data.SignedByClientChannel);

            var response = await _apiClient.ApiOffchainCreatehubcommitmentPostAsync(request);

            return PrepareOffchainResult(response);
        }

        public async Task<OffchainResponse> Finalize(FinalizeData data)
        {
            var request = new FinalizeChannelModel(data.ClientPubKey, data.AssetId, data.ClientRevokePubKey, data.SignedByClientHubCommitment, !string.IsNullOrWhiteSpace(data.ExternalTransferId) ? Guid.Parse(data.ExternalTransferId) : (Guid?)null, !string.IsNullOrWhiteSpace(data.OffchainTransferId) ? Guid.Parse(data.OffchainTransferId) : (Guid?)null);

            var response = await _apiClient.ApiOffchainFinalizePostAsync(request);

            return PrepareFinalizeOffchainResult(response);
        }

        public async Task<OffchainClosingResponse> Cashout(CashoutData data)
        {
            var request = new CashoutModel(data.ClientPubKey, data.CashoutAddress, data.HotWalletAddress, data.AssetId, data.Amount);

            var response = await _apiClient.ApiOffchainCashoutPostAsync(request);

            return PrepareOffchainClosingResult(response);
        }

        public async Task<OffchainBaseResponse> CloseChannel(CloseChannelData data)
        {
            var request = new BroadcastClosingChannelModel(data.ClientPubKey, data.AssetId, data.SignedClosingTransaction, !string.IsNullOrWhiteSpace(data.OffchainTransferId) ? Guid.Parse(data.OffchainTransferId) : (Guid?)null);

            var response = await _apiClient.ApiOffchainBroadcastclosingPostAsync(request);

            return PrepareOffchainTransactionHashResult(response);
        }

        public async Task<OffchainClosingResponse> HubCashout(HubCashoutData data)
        {
            var request = new CreateCashoutFromHubModel(data.ClientPubKey, data.Hotwallet, data.AssetId);

            var response = await _apiClient.ApiOffchainCashouthubPostAsync(request);

            return PrepareOffchainClosingResult(response);
        }

        public async Task<OffchainAssetBalancesResponse> ChannelsInfo(string asset, DateTime? date)
        {
            var response = await _apiClient.ApiOffchainAssetBalancesGetAsync(asset, date);

            return PrepareResult(response, o =>
            {
                if (response is AssetBalanceInfoResponse balances)
                    return new OffchainAssetBalancesResponse
                    {
                        Balances = balances.Balances.Select(x => new OffchainChannelBalance
                        {
                            Multisig = x.Multisig,
                            ClientAmount = x.ClientAmount ?? 0,
                            HubAmount = x.HubAmount ?? 0,
                            UpdateDt = x.UpdateDt.GetValueOrDefault()
                        })
                    };
                return null;
            });
        }

        public async Task<OffchainBalancesResponse> Balances(string multisig)
        {
            var response = await _apiClient.ApiOffchainBalancesGetAsync(multisig);

            return PrepareResult(response, o =>
            {
                if (response is OffchainBalanceResponse balances)
                    return new OffchainBalancesResponse
                    {
                        Balances = balances.Channels.ToDictionary(x => x.Key, y => new OffchainChannelBalance
                        {
                            Hash = y.Value.TransactionHash,
                            ClientAmount = y.Value.ClientAmount ?? 0,
                            HubAmount = y.Value.HubAmount ?? 0,
                            Actual = y.Value.Actual.GetValueOrDefault()
                        })
                    };
                return null;
            });
        }

        public async Task<BccSplitTransactionResponse> BccSplitTransaction(string multisig, string clientDestination,
            string hubDestination)
        {
            var response = await _apiClient.ApiBccSplitGetAsync(multisig, clientDestination, hubDestination);

            return PrepareResult(response, o =>
            {
                if (response is SplitTransactionResponse model)
                    return new BccSplitTransactionResponse
                    {
                        Transaction = model.Transaction,
                        ClientAmount = model.ClientAmount ?? 0,
                        HubAmount = model.HubAmount ?? 0,
                        ClientFeeAmount = model.ClientFeeAmount ?? 0,
                        Outputs = model.Outputs
                    };
                return null;
            });
        }

        public async Task<BccTransactionResponse> BccPrivateTransferTransaction(string sourceAddress, string destinationAddress, decimal fee)
        {
            var response = await _apiClient.ApiBccPrivatetransferGetAsync(sourceAddress, destinationAddress, fee);

            return PrepareResult(response, o =>
            {
                if (response is PrivateBccTransferResponse model)
                    return new BccTransactionResponse
                    {
                        Transaction = model.Transaction
                    };
                return null;
            });
        }

        public async Task<BccTransactionHashResponse> BccBroadcast(string transaction)
        {
            var response = await _apiClient.ApiBccBroadcastPostAsync(new BccBroadcastModel(transaction));


            return PrepareResult(response, o =>
            {
                if (response is TransactionHashResponse model)
                    return new BccTransactionHashResponse
                    {
                        TransactionHash = model.TransactionHash
                    };
                return null;
            });
        }

        private OnchainResponse PrepareOnchainResult(object response)
        {
            return PrepareResult(response, o =>
            {
                if (response is TransactionIdResponse transaction)
                {
                    return new OnchainResponse
                    {
                        Transaction =
                            new TransactionRepsonse
                            {
                                TransactionId = transaction.TransactionId
                            }
                    };
                }
                return null;
            });

        }

        private OffchainClosingResponse PrepareOffchainClosingResult(object response)
        {
            return PrepareResult(response, o =>
            {
                if (response is CashoutOffchainApiResponse cashout)
                {
                    return new OffchainClosingResponse
                    {
                        Transaction = cashout.Transaction,
                        TransferId = cashout.TransferId,
                        ChannelClosing = cashout.ChannelClosed ?? false
                    };
                }
                return null;
            });            
        }

        private OffchainResponse PrepareOffchainResult(object response)
        {
            return PrepareResult(response, o =>
            {
                if (response is OffchainApiResponse transaction)
                {
                    return new OffchainResponse
                    {
                        Transaction = transaction.Transaction,
                        TransferId = transaction.TransferId
                    };
                }
                return null;
            });
        }

        private OffchainResponse PrepareFinalizeOffchainResult(object response)
        {
            return PrepareResult(response, o =>
            {
                if (response is FinalizeOffchainApiResponse transaction)
                {
                    return new OffchainResponse
                    {
                        Transaction = transaction.Transaction,
                        TransferId = transaction.TransferId,
                        TxHash = transaction.Hash
                    };
                }
                return null;
            });           
        }

        private OffchainBaseResponse PrepareOffchainTransactionHashResult(object response)
        {
            return PrepareResult(response, o =>
            {
                if (response is TransactionHashResponse transaction)
                {
                    return new OffchainBaseResponse
                    {
                        TxHash = transaction.TransactionHash
                    };
                }
                return null;
            });            
        }


        private T PrepareResult<T>(object response, Func<object, T> convert) where T : Response
        {
            if (response is ApiException error)
            {
                var instance = Activator.CreateInstance<T>();
                instance.Error = new ErrorResponse { Code = error.Error.Code, Message = error.Error.Message };
                return instance;
            }
            var converted = convert(response);
            if (converted != null)
                return converted;
            throw new ArgumentException("Unkown response object");
        }
    }
}

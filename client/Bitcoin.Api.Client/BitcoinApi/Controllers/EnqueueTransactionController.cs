using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Bitcoin.Api.Client.AutoGenerated;
using Bitcoin.Api.Client.AutoGenerated.Models;
using Bitcoin.Api.Client.BitcoinApi.Models;

// ReSharper disable once CheckNamespace
namespace Bitcoin.Api.Client.BitcoinApi
{
    public partial class BitcoinApiClient
    {
        public async Task<OnchainResponse> IssueAsync(IssueData data)
        {
            var request = new IssueRequest(data.TransactionId, data.Address, data.AssetId, (decimal)data.Amount);

            var response = await _apiClient.ApiEnqueueTransactionIssuePostAsync(request);

            return PrepareOnchainResult(response);
        }

        public async Task<OnchainResponse> TransferAsync(TransferData data)
        {
            var request = new TransferRequest(data.TransactionId, data.SourceAddress, data.DestinationAddress,
                (decimal)data.Amount, data.AssetId);

            var response = await _apiClient.ApiEnqueueTransactionTransferPostAsync(request);

            return PrepareOnchainResult(response);
        }

        public async Task<OnchainResponse> TransferAllAsync(TransferAllData data)
        {
            var request = new TransferAllRequest(data.TransactionId, data.SourceAddress, data.DestinationAddress);

            var response = await _apiClient.ApiEnqueueTransactionTransferallPostAsync(request);

            return PrepareOnchainResult(response);
        }

        public async Task<OnchainResponse> DestroyAsync(DestroyData data)
        {
            var request = new DestroyRequest(data.TransactionId, data.Address, data.AssetId, (decimal)data.Amount);

            var response = await _apiClient.ApiEnqueueTransactionDestroyPostAsync(request);

            return PrepareOnchainResult(response);
        }

        public async Task<OnchainResponse> SwapAsyncTransaction(SwapData data)
        {
            var request = new SwapRequest(data.TransactionId, data.Multisig1, (decimal)data.Amount1, data.AssetId1,
                data.Multisig2, (decimal)data.Amount2, data.AssetId2);

            var response = await _apiClient.ApiEnqueueTransactionSwapPostAsync(request);

            return PrepareOnchainResult(response);
        }

        public async Task<OnchainResponse> RetryAsync(RetryData data)
        {
            var request = new RetryFailedRequest(data.TransactionId);

            var response = await _apiClient.ApiEnqueueTransactionRetryPostAsync(request);

            if (response != null)
                return new OnchainResponse
                {
                    Error = new ErrorResponse { Code = response.Error.Code, Message = response.Error.Message }
                };

            return new OnchainResponse();
        }

        private OnchainResponse PrepareOnchainResult(object response)
        {
            return PrepareResult(response, o =>
            {
                if (response is TransactionIdResponse transaction)
                {
                    return new OnchainResponse
                    {
                        Transaction =
                            new TransactionRepsonse
                            {
                                TransactionId = transaction.TransactionId
                            }
                    };
                }
                return null;
            });

        }
    }
}

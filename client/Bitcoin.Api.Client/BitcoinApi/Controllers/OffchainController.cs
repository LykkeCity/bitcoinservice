using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Bitcoin.Api.Client.AutoGenerated;
using Bitcoin.Api.Client.AutoGenerated.Models;
using Bitcoin.Api.Client.BitcoinApi.Models;

// ReSharper disable once CheckNamespace
namespace Bitcoin.Api.Client.BitcoinApi
{
    public partial class BitcoinApiClient
    {
        public async Task<OffchainResponse> OffchainTransferAsync(OffchainTransferData data)
        {
            var request = new TransferModel(data.ClientPubKey, data.Amount, data.AssetId, data.ClientPrevPrivateKey, data.Required, !string.IsNullOrWhiteSpace(data.ExternalTransferId) ? Guid.Parse(data.ExternalTransferId) : (Guid?)null);

            var response = await _apiClient.ApiOffchainTransferPostAsync(request);

            return PrepareOffchainResult(response);
        }

        public async Task<OffchainClosingResponse> CreateChannelAsync(CreateChannelData data)
        {
            var request = new CreateChannelModel(data.ClientPubKey, data.HubAmount, data.AssetId, data.Required, !string.IsNullOrWhiteSpace(data.ExternalTransferId) ? Guid.Parse(data.ExternalTransferId) : (Guid?)null, data.ClientAmount);

            var response = await _apiClient.ApiOffchainCreatechannelPostAsync(request);

            return PrepareOffchainClosingResult(response);
        }

        public async Task<OffchainResponse> CreateHubCommitment(CreateHubComitmentData data)
        {
            var request = new CreateHubCommitmentModel(data.ClientPubKey, data.AssetId, data.Amount, data.SignedByClientChannel);

            var response = await _apiClient.ApiOffchainCreatehubcommitmentPostAsync(request);

            return PrepareOffchainResult(response);
        }

        public async Task<OffchainResponse> Finalize(FinalizeData data)
        {
            var request = new FinalizeChannelModel(data.ClientPubKey, data.AssetId, data.ClientRevokePubKey, data.SignedByClientHubCommitment, !string.IsNullOrWhiteSpace(data.ExternalTransferId) ? Guid.Parse(data.ExternalTransferId) : (Guid?)null, !string.IsNullOrWhiteSpace(data.OffchainTransferId) ? Guid.Parse(data.OffchainTransferId) : (Guid?)null);

            var response = await _apiClient.ApiOffchainFinalizePostAsync(request);

            return PrepareFinalizeOffchainResult(response);
        }

        public async Task<OffchainClosingResponse> Cashout(CashoutData data)
        {
            var request = new CashoutModel(data.ClientPubKey, data.CashoutAddress, data.HotWalletAddress, data.AssetId, data.Amount);

            var response = await _apiClient.ApiOffchainCashoutPostAsync(request);

            return PrepareOffchainClosingResult(response);
        }

        public async Task<OffchainBaseResponse> CloseChannel(CloseChannelData data)
        {
            var request = new BroadcastClosingChannelModel(data.ClientPubKey, data.AssetId, data.SignedClosingTransaction, !string.IsNullOrWhiteSpace(data.OffchainTransferId) ? Guid.Parse(data.OffchainTransferId) : (Guid?)null);

            var response = await _apiClient.ApiOffchainBroadcastclosingPostAsync(request);

            return PrepareOffchainTransactionHashResult(response);
        }

        public async Task<OffchainClosingResponse> HubCashout(HubCashoutData data)
        {
            var request = new CreateCashoutFromHubModel(data.ClientPubKey, data.Hotwallet, data.AssetId);

            var response = await _apiClient.ApiOffchainCashouthubPostAsync(request);

            return PrepareOffchainClosingResult(response);
        }

        public async Task<OffchainAssetBalancesResponse> ChannelsInfo(string asset, DateTime? date)
        {
            var response = await _apiClient.ApiOffchainAssetBalancesGetAsync(asset, date);

            return PrepareResult(response, o =>
            {
                if (response is AssetBalanceInfoResponse balances)
                    return new OffchainAssetBalancesResponse
                    {
                        Balances = balances.Balances.Select(x => new OffchainChannelBalance
                        {
                            Multisig = x.Multisig,
                            ClientAmount = x.ClientAmount ?? 0,
                            HubAmount = x.HubAmount ?? 0,
                            UpdateDt = x.UpdateDt.GetValueOrDefault()
                        })
                    };
                return null;
            });
        }

        public async Task<OffchainBalancesResponse> Balances(string multisig)
        {
            var response = await _apiClient.ApiOffchainBalancesGetAsync(multisig);

            return PrepareResult(response, o =>
            {
                if (response is OffchainBalanceResponse balances)
                    return new OffchainBalancesResponse
                    {
                        Balances = balances.Channels.ToDictionary(x => x.Key, y => new OffchainChannelBalance
                        {
                            Hash = y.Value.TransactionHash,
                            ClientAmount = y.Value.ClientAmount ?? 0,
                            HubAmount = y.Value.HubAmount ?? 0,
                            Actual = y.Value.Actual.GetValueOrDefault()
                        })
                    };
                return null;
            });
        }


        private OffchainClosingResponse PrepareOffchainClosingResult(object response)
        {
            return PrepareResult(response, o =>
            {
                if (response is CashoutOffchainApiResponse cashout)
                {
                    return new OffchainClosingResponse
                    {
                        Transaction = cashout.Transaction,
                        TransferId = cashout.TransferId,
                        ChannelClosing = cashout.ChannelClosed ?? false
                    };
                }
                return null;
            });
        }

        private OffchainResponse PrepareOffchainResult(object response)
        {
            return PrepareResult(response, o =>
            {
                if (response is OffchainApiResponse transaction)
                {
                    return new OffchainResponse
                    {
                        Transaction = transaction.Transaction,
                        TransferId = transaction.TransferId
                    };
                }
                return null;
            });
        }

        private OffchainResponse PrepareFinalizeOffchainResult(object response)
        {
            return PrepareResult(response, o =>
            {
                if (response is FinalizeOffchainApiResponse transaction)
                {
                    return new OffchainResponse
                    {
                        Transaction = transaction.Transaction,
                        TransferId = transaction.TransferId,
                        TxHash = transaction.Hash
                    };
                }
                return null;
            });
        }

        private OffchainBaseResponse PrepareOffchainTransactionHashResult(object response)
        {
            return PrepareResult(response, o =>
            {
                if (response is TransactionHashResponse transaction)
                {
                    return new OffchainBaseResponse
                    {
                        TxHash = transaction.TransactionHash
                    };
                }
                return null;
            });
        }
    }
}
